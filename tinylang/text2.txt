fn factorialRecursive(x: int) -> int {
  if (x > 0) {
    return x * factorialRecursive(x - 1);  
  } else {
    return 1;
  }
}

fn factorialLoop(x: int) -> int {
  let new : int = 1;
  while (x > 0) {
    new = new * x;
    x = x - 1;
  }
  return new;
}

let x: int = 5;
print factorialLoop(x);
print factorialRecursive(x);